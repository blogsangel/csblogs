{
  "hash": "07d965324a95a675be880aebc87c9ca8",
  "result": {
    "markdown": "---\ntitle: 'Regression '\nformat:\n  html:\n    code-fold: true\n---\n\n# Regresion \na Supervised problem where we have some continues target to predict. In this Blog we have cover the Linear and nonliner regression on Two Linear and non linear data\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n```\n:::\n\n\nMake Linear Data\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nX = 2 * np.random.rand(100, 1)\ny = 4 + 3 * X\n```\n:::\n\n\nMake code to Plot\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndef MakePlot(X,y,y_pred,title=\"Nonlinear Regression Example\"):\n    plt.figure()\n    plt.scatter(X, y)\n    plt.plot(X, y_pred, \"r-\")\n    plt.xlabel(\"Time\")\n    plt.ylabel(\"Population\")\n    plt.title(title)\n    plt.show()\n```\n:::\n\n\nLiner Regression model on Linear Data\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nreg = LinearRegression().fit(X, y)\nprint(\"Accuracy\",int(reg.score(X, y)*100),\"%\")\n# print(reg.coef_,reg.intercept_)\ny_pred=reg.predict(X)\nMakePlot(X,y,y_pred,\"Linear Regression Model  On Linear Data\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAccuracy 100 %\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-2.png){width=585 height=449}\n:::\n:::\n\n\nLiner Regression model on NonLinear Data\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nX = np.linspace(0, 3, 100)\n# y = 2 * np.exp(1.5 * X)\ny = np.array([i*5+3 if i>3 else i*50  for i in 2 * X])\nX,y=X[:,np.newaxis],y[:,np.newaxis]\n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nreg = LinearRegression().fit(X, y)\nprint(\"Accuracy\",int(reg.score(X, y)*100),\"%\")\nprint(reg.coef_,reg.intercept_)\ny_pred=reg.predict(X)\nMakePlot(X,y,y_pred,\"Linear Regression Model On NonLinear Data\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAccuracy 5 %\n[[-10.34653465]] [65.42889289]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-2.png){width=593 height=449}\n:::\n:::\n\n\nNonLiner Regression model on NonLinear Data\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfrom sklearn.tree import DecisionTreeRegressor\n\nreg = DecisionTreeRegressor().fit(X, y)\nprint(\"Accuracy\",int(reg.score(X, y)*100),\"%\")\ny_pred=reg.predict(X)\nMakePlot(X,y,y_pred,\"NonLinear Regression Model On NonLinear Data\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAccuracy 100 %\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-2.png){width=593 height=449}\n:::\n:::\n\n\nLinear Regression Models work well if our Dependent variable is linearly correlated to Independent variables. However, when we try that on Nonlinear data where dependent is not linearly correlated the score is very low, but when we apply some nonlinear model (Decision Tree) on it we got a good regression Score.\n\n# Reference links:\n\n[1] https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html\n\n[2] https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeRegressor.html\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}