{
  "hash": "8fff4b7d1c8fc529dee894f71923c76f",
  "result": {
    "markdown": "---\ntitle: Anomaly Detection\nformat:\n  html:\n    code-fold: true\n---\n\n## Anomaly detection\nAnomaly detection is the process of identifying data points, entities or events that fall outside the normal range.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn.neighbors import LocalOutlierFactor\n```\n:::\n\n\nMake Some Dummy Data and add Anomalites on that. we have added two type of anomally onw contane large scale and other have different loction. all Data from Normal Sitribution\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Generate synthetic data with anomalies\nnp.random.seed(42)\nnormal_data = np.random.normal(0, 1, (1000, 2))\nanomalies = np.random.normal(20, 1, (50, 2))\nanomalies2 = np.random.normal(0, 5, (50, 2))\n# Combine normal and anomaly data\ndata = np.vstack([normal_data, anomalies,anomalies2])\n```\n:::\n\n\nFind the Anomality with IsolationForest. \n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Fit the Isolation Forest model\nmodel = IsolationForest(contamination=0.05)  # Contamination is the proportion of outliers\nmodel.fit(data)\n\n# Predict the labels (1 for inliers, -1 for outliers)\nlabels = model.predict(data)\n\n# Plot the data and highlight anomalies\nplt.scatter(data[:, 0], data[:, 1], c=labels, cmap='viridis')\nplt.title('Isolation Forest Anomaly Detection')\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\nplt.colorbar()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=578 height=449}\n:::\n:::\n\n\nFind the Anomality with IsolationForest\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Fit the Isolation Forest model\nmodel = LocalOutlierFactor()  # Contamination is the proportion of outliers\n\n# Predict the labels (1 for inliers, -1 for outliers)\nlabels = model.fit_predict(data)\n\n# Plot the data and highlight anomalies\nplt.scatter(data[:, 0], data[:, 1], c=labels, cmap='viridis')\nplt.title('Isolation Forest Anomaly Detection')\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\nplt.colorbar()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=578 height=449}\n:::\n:::\n\n\nwe have implement two Anomaly Detection methods, One is IsolationForest which randomly selecting a split value between the maximum and minimum values of the selected feature to find the outlier/ Anomaly from that.\nand another is LocalOutlierFactor which measures the local deviation of the density of a given sample with respect to its neighbors. It is local in that the anomaly score depends on how isolated the object is with respect to the surrounding neighborhood.\n\nReference links:\n\n[1]https://www.techtarget.com/searchenterpriseai/definition/anomaly-detection\n\n[2]https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.LocalOutlierFactor.html#sklearn.neighbors.LocalOutlierFactor\n\n[3]https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.IsolationForest.html#sklearn.ensemble.IsolationForest\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}